/* Problem 45: Triangular, pentagonal, and hexagonal
 *
 * Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:
 *
 * Triangle    Tn=n(n+1)/2    1, 3, 6, 10, 15, ...
 * Pentagonal  Pn=n(3n−1)/2   1, 5, 12, 22, 35, ...
 * Hexagonal   Hn=n(2n−1)     1, 6, 15, 28, 45, ...
 *
 * It can be verified that T285 = P165 = H143 = 40755.
 *
 * Find the next triangle number that is also pentagonal and hexagonal. */

const TARGET: u32 = 40755;

fn main() {
    let mut triangles = numbers_from_formula(|n| n * (n + 1) / 2);
    let mut pentagonals = numbers_from_formula(|n| n * (3 * n - 1) / 2);
    let hexagonals = numbers_from_formula(|n| n * (2 * n - 1));

    for hex in hexagonals.skip_while(|&h| h <= TARGET) {
        let pent = pentagonals.find(|&p| p >= hex).unwrap();
        if pent != hex {
            continue;
        }

        let trig = triangles.find(|&t| t >= hex).unwrap();
        if trig != hex {
            continue;
        }

        println!("{}", hex);
        return;
    }
}

fn numbers_from_formula<F>(formula: F) -> NumbersFromFormula<F>
where
    F: Fn(u32) -> u32,
{
    NumbersFromFormula {
        last_n: 0,
        formula: formula,
    }
}

struct NumbersFromFormula<F>
where
    F: Fn(u32) -> u32,
{
    last_n: u32,
    formula: F,
}

impl<F> Iterator for NumbersFromFormula<F>
where
    F: Fn(u32) -> u32,
{
    type Item = u32;

    fn next(&mut self) -> Option<u32> {
        let n = self.last_n + 1;
        self.last_n = n;

        Some((self.formula)(n))
    }
}
